--o tropos me ton opoio sto quartus arxikopoioume
--mia mnhmh einai na ftiaxoume ena arxeio .mif
--me to opoio orizoume to megethos tis mnimis 
-- kathws kai ta dedomena pou periexei,
-- to parakatw programma tha sas thimisei tin askisi
-- me thn diafora oti kanw prosthesi kai oxi pollaplasiasmo
-- exoume dyo dianusmata 2 thesewn to F kai to C pou orizontai
-- katw katw sto arxeio, prospathiste na katalavete ti ginetai.... 

depth=256;
width=8;
content
begin

--Accumulator is register 0
-- PC is register 1
-- X is register 2


--adds vectors		 #F, #S, #D, of #LENGTH
--with addresses 	 C0, D0, E0,    F1 respectively

--variables
-- F->C0 
-- S->D0
-- D->EO destination

00 : 00; --run bootstrap 
01 : 07; -- LOAD Reg[0],0		    /* Acc:=0 */
02 : 00; -- op1   
03 : 00; -- op2 
04 : 02; --LDX 0					    /* X:=0 */
05 : 00; --op1
06 : 05; --STA F2,X				    /* counter:=Acc */
07 : F2; --op1
08 : 06; -- LOAD Reg[2],F2		    /* X:=counter*/
09 : 02; --op1
0A : F2; --op2
0B : 01; -- LDA mem(f), X 		    /* Acc:=M(C0)*/ 
0C : C0; -- op1
0D : 0D; -- ADC mem(S), X 			 /* Acc+=mem(D0) */ 
0E : D0; --#S
0F : 05; --STA E0,X			 	    /* mem(E0):=Acc */
10 : E0; --#D
11 : 03; --INX						    /* X++ */
12 : 08; --STORE reg(X),counter   /* counter:=X */
13 : 02; --op1
14 : F2; --op2
15 : 02; --LDX 0						 /* X:=0 */
16 : 00;
17 : 01; --LDA F0,X				    /* Acc:=length */
18 : F0; --op1 
19 : 0F; --SBC $K,X               /* Acc-=monada */
1A : F1;
1B : 05;  --STA F0,X					 /* length:=Acc */
1C : F0;
1D : 0C; --BRNZ  pou??				 /* if(alu_result!=0)jump to address08 */
1E : 08; --op1
1F : 0A; --BRK

C0: 40;
C1: 01;

D0: 40;
D1: 07;
F0: 02; --length
F1: 01; --monada
F2: 00; --counter
end;
